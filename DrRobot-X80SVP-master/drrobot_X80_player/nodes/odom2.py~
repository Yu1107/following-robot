#!/usr/bin/env python

""" odom_out_and_back.py - Version 1.1 2013-12-20

    A basic demo of using the /odom topic to move a robot a given distance
    or rotate through a given angle.

    Created for the Pi Robot Project: http://www.pirobot.org
    Copyright (c) 2012 Patrick Goebel.  All rights reserved.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.5

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details at:

    http://www.gnu.org/licenses/gpl.html

"""

import rospy
from geometry_msgs.msg import Twist, Point, Quaternion
import tf
from transform_utils import quat_to_angle, normalize_angle
from math import radians, copysign, sqrt, pow, pi

global ok
ok = False

class OutAndBack():
    def __init__(self):
        # Give the node a name
        rospy.init_node('out_and_back', anonymous=True)

        # Set rospy to execute a shutdown function when exiting
        rospy.on_shutdown(self.shutdown)

        # Publisher to control the robot's speed
        self.cmd_vel = rospy.Publisher('/cmd_vel', Twist, queue_size=5)

	msg = Bool()
        # Publisher the robot's is achieved
        #self.goal_achieved_pub = rospy.Publisher('/goal_achieved', Bool, queue_size=1)
	self.imu_subscriber = rospy.Subscriber('start_IMU', Bool,self.callback) 

        # How fast will we update the robot's movement?
        rate = 10

        # Set the equivalent ROS rate variable
        r = rospy.Rate(rate)

        # Set the forward linear speed to 0.15 meters per second
        self.linear_speed = 0.6

        # Set the travel distance in meters
        goal_distance = 1.0

        # Set the rotation speed in radians per second
        self.angular_speed = 0.5


        # Initialize the tf listener
        self.tf_listener = tf.TransformListener()

        self.distance_tolerance = rospy.get_param("~distance_tolerance",0.25)

        # Give tf some time to fill its buffer
        rospy.sleep(1)

        # Set the odom frame
        self.odom_frame = '/odom'

        # Find out if the robot uses /base_link or /base_footprint
        try:
            self.tf_listener.waitForTransform(self.odom_frame, '/base_footprint', rospy.Time(), rospy.Duration(1.0))
            self.base_frame = '/base_footprint'
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            try:
                self.tf_listener.waitForTransform(self.odom_frame, '/base_link', rospy.Time(), rospy.Duration(1.0))
                self.base_frame = '/base_link'
            except (tf.Exception, tf.ConnectivityException, tf.LookupException):
                rospy.loginfo("Cannot find transform between /odom and /base_link or /base_footprint")
                rospy.signal_shutdown("tf Exception")

################### Wait for the  Pos topic to become available ##########################
        goal_topic = '/PDR_position'
        self.position_subscriber = rospy.Subscriber(goal_topic, Point, self.set_cmd_vel, queue_size=1)
        rospy.loginfo("Subscribing to PDR position...")

        # Wait for the  topic to become available
        rospy.wait_for_message(goal_topic, Point)


############################# Setup velcity and omega #######################################
    def callback(self,msg):
	global ok
	ok = msg.data 
	
	


     #Callback function implementing the "goal_position" value received
    def set_cmd_vel(self, position):
        rospy.loginfo(" goal: [%5.2f, %5.2f]", position.x,position.y);
        goal_x = round(position.x,4)
        goal_y = round(position.y,4)

        # Initialize the robot_position variable as a Point type
        robot_position = Point()

        # Initialize the command
        move_cmd = Twist()

    	rospy.loginfo(" now -> %s", ok)

        # Get the starting position values
        (robot_position, rotation) = self.get_odom()

        if (ok == True ):

		# Set the movement command to forward motion
		move_cmd.linear.x = self.linear_speed
		distanceToGoal = sqrt(pow((goal_x - robot_position.x), 2) + pow((goal_y - robot_position.y), 2))
		while (distanceToGoal > self.distance_tolerance): #and not rospy.is_shutdown():
		        # Publish the Twist message and sleep 1 cycle
		        self.cmd_vel.publish(move_cmd)	     		
			rospy.sleep(1)

		        # Get the current position
		        (robot_position, rotation) = self.get_odom()

		        # Compute the Euclidean distance from the start
		        distanceToGoal = sqrt(pow((goal_x - robot_position.x), 2) + pow((goal_y - robot_position.x), 2))
			rospy.loginfo(" distanceToGoal:[%5.2f], now -> robot:[%5.2f,%5.2f]",distanceToGoal,robot_position.x,robot_position.y);
			
		# Stop the robot before the rotation
		#Stopping our robot after the movement is over
		move_cmd.linear.x = 0
		move_cmd.angular.z = 0
		self.cmd_vel.publish(move_cmd)
		#rospy.sleep(1)

		# Set the movement command to a rotation
		move_cmd.angular.z = self.angular_speed

		# Track the last angle measured
		last_angle = rotation

		# Track how far we have turned
		turn_angle = 0
		goal_angle = atan2(goal_y - robot_position.y,goal_x - robot_position.x)


		while abs(turn_angle + angular_tolerance) > abs(goal_angle): #and not rospy.is_shutdown():
		        # Publish the Twist message and sleep 1 cycle
		        self.cmd_vel.publish(move_cmd)
	       		rospy.sleep(1)

		        # Get the current rotation
		        (robot_position, rotation) = self.get_odom()

		        # Compute the amount of rotation since the last loop
		        delta_angle = normalize_angle(rotation - last_angle)

		        # Add to the running total
		        turn_angle += delta_angle
		        last_angle = rotation

		# Stop the robot before the next leg
		move_cmd = Twist()
		self.cmd_vel.publish(move_cmd)
		rospy.sleep(1)

	# Stop the robot for good
	self.cmd_vel.publish(Twist())




    def get_odom(self):
        # Get the current transform between the odom and base frames
        try:
            (trans, rot)  = self.tf_listener.lookupTransform(self.odom_frame, self.base_frame, rospy.Time(0))
        except (tf.Exception, tf.ConnectivityException, tf.LookupException):
            rospy.loginfo("TF Exception")
            return

        return (Point(*trans), quat_to_angle(Quaternion(*rot)))

    def shutdown(self):
        # Always stop the robot when shutting down the node.
        rospy.loginfo("Stopping the robot...")
        self.cmd_vel.publish(Twist())
        rospy.sleep(1)

if __name__ == '__main__':
    try:
        OutAndBack()
	rospy.spin()
    except:
        rospy.loginfo("Out-and-Back node terminated.")

