#include "ros/ros.h"
#include "visualization_msgs/Marker.h"
#include "visualization_msgs/MarkerArray.h"
#include "geometry_msgs/Point.h"
#include <tf/transform_broadcaster.h>
#include <tf/transform_listener.h>
#include <std_msgs/Bool.h>


int ii=1,jj=1;
bool ok = false;
bool shortok = false;

class SubAndPub
{
  public:
  SubAndPub() {

     // plot goal_position
      goalpub = n.advertise<visualization_msgs::Marker>("/visualization_marker",10);

      goalsub = n.subscribe("/PDR_position",10, &SubAndPub::cmd1VelCallback, this);

     // plot tracker_position
      trackerpub = n.advertise<visualization_msgs::Marker>("/tracker_marker",10);
      //trackerarraypub = n.advertise<visualization_msgs::MarkerArray>("/tracker_markerarray",10);
      trackersub = n.subscribe("tracker_body_position",10, &SubAndPub::cmd2VelCallback, this);

      startsub = n.subscribe("/start_IMU",5, &SubAndPub::IMUCallback, this);
      //shortsub = n.subscribe("/short_kinect",5, &SubAndPub::shortCallback, this);
  }
  void cmd1VelCallback(const geometry_msgs::Point::ConstPtr& Point_msg1);
  void cmd2VelCallback(const geometry_msgs::Point::ConstPtr& Point_msg2);
  void IMUCallback(const std_msgs::Bool::ConstPtr& msg);
  void shortCallback(const std_msgs::Bool::ConstPtr& shortmsg);
  private:
  ros::NodeHandle n;
  ros::Publisher goalpub,trackerpub,trackerarraypub;
  ros::Subscriber goalsub,trackersub,startsub,shortsub;

    // Frame broadcaster
    tf::TransformBroadcaster tfBroadcast_;
};

/*void SubAndPub::shortCallback(const std_msgs::Bool::ConstPtr& shortmsg){

  shortok = shortmsg -> data;
}*/

void SubAndPub::IMUCallback(const std_msgs::Bool::ConstPtr& msg){

   ok = msg -> data;
}

//PDR plot
void SubAndPub::cmd1VelCallback(const geometry_msgs::Point::ConstPtr& Point_msg1)
{
  visualization_msgs::Marker points, line_strip, line_list;

  points.header.frame_id = line_strip.header.frame_id = line_list.header.frame_id = "/kinect_link"; 
  points.header.stamp = line_strip.header.stamp = line_list.header.stamp = ros::Time::now();

  points.action = line_strip.action = line_list.action = visualization_msgs::Marker::ADD;
  points.pose.orientation.w = line_strip.pose.orientation.w = line_list.pose.orientation.w = 1.0;

  points.id = 0;
  line_list.id = 2;


  points.type = visualization_msgs::Marker::POINTS;
  line_list.type = visualization_msgs::Marker::LINE_LIST;



   // POINTS markers use x and y scale for width/height respectively
  points.scale.x = 0.07;
  points.scale.y = 0.07;



        // LINE_STRIP/LINE_LIST markers use only the x component of scale, for the line width

	 line_list.scale.x = 0.05;



    if (ok == true){
    //ROS_INFO_STREAM("kinect is lost.");

    // Points are orange
    points.color.g = 0.5;
    points.color.r = 1;
    points.color.b = 0.0;
    points.color.a = 1.0;

   	// Publish the joints over the TF stream
	tf::Vector3 currentVec3 = tf::Vector3(Point_msg1->x, Point_msg1->y, 0);
	tf::Transform transform;
	tf::Quaternion q;
	q.setRPY(0, 0, 0);
	transform.setOrigin(currentVec3);
	transform.setRotation(q);
	tfBroadcast_.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "kinect_link", "kinect_end"));
    }
    else{

         // Points are blue
         points.color.b = 1.0;
    	 points.color.a = 1.0;

   	// Publish the joints over the TF stream
	tf::Vector3 currentVec3 = tf::Vector3(Point_msg1->x, Point_msg1->y, 0);
	tf::Transform transform;
	tf::Quaternion q;
	q.setRPY(0, 0, 0);
	transform.setOrigin(currentVec3);
	transform.setRotation(q);
	tfBroadcast_.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "kinect_link", "PDR_Estimate"));

}


    // Line list 为红色
    line_list.color.r = 1.0;
    line_list.color.a = 1.0;

    geometry_msgs::Point p;
    points.ns = line_strip.ns = ii;
    p.x = Point_msg1 -> x;
    p.y = Point_msg1 -> y;
    p.z = 0;



    points.points.push_back(p);

    line_list.points.push_back(p);
    p.z += 0.5;
    line_list.points.push_back(p);

    goalpub.publish(points);

    goalpub.publish(line_list);

    ++ii;
}



//kinect plot
void SubAndPub::cmd2VelCallback(const geometry_msgs::Point::ConstPtr& Point_msg2)
{
  visualization_msgs::Marker points, line_strip, line_list;
  visualization_msgs::MarkerArray points_array;


    points.header.frame_id = line_strip.header.frame_id = line_list.header.frame_id = "/kinect_link"; 
    points.header.stamp = line_strip.header.stamp = line_list.header.stamp = ros::Time::now();

    points.action = line_strip.action = line_list.action = visualization_msgs::Marker::ADD;
    points.pose.orientation.w = line_strip.pose.orientation.w = line_list.pose.orientation.w = 1.0;

    points.id = 0;
    line_list.id = 2;

      points.type = visualization_msgs::Marker::POINTS;
     line_list.type = visualization_msgs::Marker::LINE_LIST;

   /*if (shortok == true){

      ROS_INFO_STREAM("kinect is lost.");
      points.scale.x = 0.07;
      points.scale.y = 0.07;

      // Points are orange
      points.color.g = 0.7;
      points.color.r = 1.0;
      points.color.b = 0.0;
      points.color.a = 1.0;

   	// Publish the joints over the TF stream
	tf::Vector3 currentVec3 = tf::Vector3(Point_msg2->x, Point_msg2->y, 0);
	tf::Transform transform;
	tf::Quaternion q;
	q.setRPY(0, 0, 0);
	transform.setOrigin(currentVec3);
	transform.setRotation(q);
	tfBroadcast_.sendTransform(tf::StampedTransform(transform, ros::Time::now(), "kinect_link", "kinect_end"));
      
    }*/

        // POINTS markers use x and y scale for width/height respectively
    points.scale.x = 0.05;
    points.scale.y = 0.05;

        // LINE_STRIP/LINE_LIST markers use only the x component of scale, for the line width
	 line_list.scale.x = 0.05;

    // Points are green
    points.color.g = 1.0;
    points.color.a = 1.0;

 

    // Line list 为红色
    line_list.color.r = 1.0;
    line_list.color.a = 1.0;



    geometry_msgs::Point p;
    points.ns = line_strip.ns =jj;
    p.x = Point_msg2->x;
    p.y = Point_msg2->y;
    p.z = 0;


    points.points.push_back(p);
    /*line_list.points.push_back(p);
    p.z += 0.5;
    line_list.points.push_back(p);*/

    trackerpub.publish(points);
     //trackerpub.publish(line_list);}
   
    ++jj;

}


int main(int argc, char **argv)
{
  ros::init(argc, argv, "marker_path");

  SubAndPub substerAndPubster;
  ros::spin();

  return 0;
}
